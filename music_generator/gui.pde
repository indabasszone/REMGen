/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

//when an emotion is selected, it updates the gui so that a loop can now be generated
public void emoListClick(GDropList source, GEvent event) { //_CODE_:emoList:902319:
  selected = true;
  waitBtn.setEnabled(false);
  waitBtn.setVisible(false);
  playBtn.setEnabled(true);
  playBtn.setVisible(true);
  emotion = emoList.getSelectedIndex();
} //_CODE_:emoList:902319:

// when generate is pressed, it sets started to true so that the generator will start,
// then adjusts the gui elements accordingly
public void playBtnClick(GImageButton source, GEvent event) { //_CODE_:playBtn:315498:
  delay(1500);
  started = true;
  if (!startedOnce) startedOnce = true;
  playBtn.setVisible(false);
  playBtn.setEnabled(false);
  newMelBtn.setVisible(true);
  newMelBtn.setEnabled(true);
  emoList.setEnabled(false);
  emoList.setLocalColorScheme(GCScheme.RED_SCHEME);
  reviewBtn.setEnabled(true);
  reviewBtn.setVisible(true);
} //_CODE_:playBtn:315498:

// when new melody is pressed, it stops the generator, resets all the buttons and the
// drop list, sets selected to false so that the user has to reselect
public void newMelBtnClick(GImageButton source, GEvent event) { //_CODE_:newMelBtn:416107:
  stopped = true;
  selected = false;
  delay(2000);
  emoList.setSelected(0);
  waitBtn.setVisible(true);
  waitBtn.setEnabled(true);
  newMelBtn.setVisible(false);
  newMelBtn.setEnabled(false);
  emoList.setEnabled(true);
  emoList.setLocalColorScheme(GCScheme.CYAN_SCHEME);
} //_CODE_:newMelBtn:416107:

// button shown in place of generate when an emotion isn't selected
public void waitBtnClick(GImageButton source, GEvent event) { //_CODE_:waitBtn:497906:
  //do nothing
} //_CODE_:waitBtn:497906:

// opens the review window when the review button is clicked
public void reviewBtnClick(GImageButton source, GEvent event) { //_CODE_:reviewBtn:757304:
  reviewWindow.setVisible(true);
} //_CODE_:reviewBtn:757304:

// saves the responses table one last time and exits the program
public void exitBtnClick(GImageButton source, GEvent event) { //_CODE_:exitBtn:229027:
  saveTable(responses, "data/responses.csv");
  exit();
} //_CODE_:exitBtn:229027:

//when start is clicked, it changes from the intro screen to the main screen
public void startBtnClick(GImageButton source, GEvent event) { //_CODE_:startBtn:955530:
  startBtn.setEnabled(false);
  startBtn.setVisible(false);
  waitBtn.setEnabled(true);
  waitBtn.setVisible(true);
  exitBtn.setEnabled(true);
  exitBtn.setVisible(true);
  emoList.setEnabled(true);
  emoList.setVisible(true);
  bg = loadImage("mainbackground.png");
} //_CODE_:startBtn:955530:

// draw method for the review window
synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:reviewWindow:870138:
  appc.background(rbg); 
  appc.textFont(font);
  appc.textSize(18);
  appc.text("Rate how well the loop", 84, 45);
  appc.text("captured the selected emotion.", 50, 67);
  appc.text("Rate the overall", 110, 200);
  appc.text("quality/musicality of the loop.", 57, 222);
} //_CODE_:reviewWindow:870138:

// when submit is pressed, it adds all necessary data to the responses file and saves it
public void submitBtnClick(GImageButton source, GEvent event) { //_CODE_:submitBtn:563707:
  TableRow response = responses.addRow();
  response.setString("Pad", pad);
  response.setString("Instrument1", inst1);
  response.setString("Instrument2", inst2);
  response.setString("Key", keyMap.get(key1));
  response.setInt("Tempo", tempo);
  response.setString("Emotion", emoMap.get(emotion));
  response.setFloat("EmoRating", rateEmote.getValueF());
  response.setFloat("Listenability", rateMusic.getValueF());
  
  saveTable(responses, "data/responses.csv");
  delay(1000);
  reviewWindow.setVisible(false);
} //_CODE_:submitBtn:563707:

public void rateEmoteChange(GCustomSlider source, GEvent event) { //_CODE_:rateEmote:750570:
  
} //_CODE_:rateEmote:750570:

public void rateMusicChange(GCustomSlider source, GEvent event) { //_CODE_:rateMusic:209235:
  
} //_CODE_:rateMusic:209235:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  emoList = new GDropList(this, 30, 136, 160, 210, 4, 20);
  emoList.setItems(loadStrings("list_902319"), 0);
  emoList.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  emoList.addEventHandler(this, "emoListClick");
  playBtn = new GImageButton(this, 250, 135, 160, 45, new String[] { "generate.png", "genhover.png", "generating.png" } );
  playBtn.addEventHandler(this, "playBtnClick");
  newMelBtn = new GImageButton(this, 250, 135, 160, 45, new String[] { "newmel.png", "newmelhover.png", "reset.png" } );
  newMelBtn.addEventHandler(this, "newMelBtnClick");
  waitBtn = new GImageButton(this, 250, 135, 160, 45, new String[] { "waiting.png", "waiting.png", "waiting.png" } );
  waitBtn.addEventHandler(this, "waitBtnClick");
  reviewBtn = new GImageButton(this, 470, 135, 160, 45, new String[] { "review.png", "reviewhover.png", "opening.png" } );
  reviewBtn.addEventHandler(this, "reviewBtnClick");
  exitBtn = new GImageButton(this, 585, 505, 100, 30, new String[] { "exit.png", "exithover.png", "exit.png" } );
  exitBtn.addEventHandler(this, "exitBtnClick");
  startBtn = new GImageButton(this, 270, 450, 160, 45, new String[] { "start.png", "starthover.png", "start.png" } );
  startBtn.addEventHandler(this, "startBtnClick");
  reviewWindow = GWindow.getWindow(this, "Window title", 0, 0, 350, 400, JAVA2D);
  reviewWindow.noLoop();
  reviewWindow.setActionOnClose(G4P.CLOSE_WINDOW);
  reviewWindow.addDrawHandler(this, "win_draw1");
  submitBtn = new GImageButton(reviewWindow, 95, 320, 160, 45, new String[] { "submit.png", "submithover.png", "submitted.png" } );
  submitBtn.addEventHandler(this, "submitBtnClick");
  rateEmote = new GCustomSlider(reviewWindow, 30, 60, 290, 100, "blue18px");
  rateEmote.setShowValue(true);
  rateEmote.setShowLimits(true);
  rateEmote.setLimits(3.0, 1.0, 5.0);
  rateEmote.setNbrTicks(9);
  rateEmote.setStickToTicks(true);
  rateEmote.setEasing(3.0);
  rateEmote.setNumberFormat(G4P.DECIMAL, 1);
  rateEmote.setLocalColorScheme(GCScheme.SCHEME_8);
  rateEmote.setOpaque(false);
  rateEmote.addEventHandler(this, "rateEmoteChange");
  rateMusic = new GCustomSlider(reviewWindow, 30, 210, 290, 100, "blue18px");
  rateMusic.setShowValue(true);
  rateMusic.setShowLimits(true);
  rateMusic.setLimits(3.0, 1.0, 5.0);
  rateMusic.setNbrTicks(9);
  rateMusic.setStickToTicks(true);
  rateMusic.setEasing(4.0);
  rateMusic.setNumberFormat(G4P.DECIMAL, 1);
  rateMusic.setLocalColorScheme(GCScheme.SCHEME_8);
  rateMusic.setOpaque(false);
  rateMusic.addEventHandler(this, "rateMusicChange");
  reviewWindow.loop();
}

// Variable declarations 
// autogenerated do not edit
GDropList emoList; 
GImageButton playBtn; 
GImageButton newMelBtn; 
GImageButton waitBtn; 
GImageButton reviewBtn; 
GImageButton exitBtn; 
GImageButton startBtn; 
GWindow reviewWindow;
GImageButton submitBtn; 
GCustomSlider rateEmote; 
GCustomSlider rateMusic; 
